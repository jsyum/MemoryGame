{"version":3,"sources":["components/Images/Painting.js","components/Images/Paintings.js","components/Header/Header.js","components/Images/Images.js","App.js","serviceWorker.js","index.js"],"names":["Painting","_this$props$painting","this","props","painting","id","name","src","react_default","a","createElement","width","height","alt","key","onClick","changeClickedState","bind","Component","Paintings","_this","paintings","map","Images_Painting","Header","_this$props","score","topScore","Images","state","clicked","setState","shuffleArr","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","components_Header_Header","Images_Paintings","App","components_Images_Images","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cb88ecd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Painting extends Component {\n  render() {\n    const { id, name, src } = this.props.painting;\n    return (\n      <img\n        width=\"200px\"\n        height=\"200px\"\n        alt={name}\n        src={src}\n        key={id}\n        onClick={this.props.changeClickedState.bind(this, id)}\n      />\n    );\n  }\n}\n\nPainting.propTypes = {\n  painting: PropTypes.object.isRequired,\n  changeClickedState: PropTypes.func.isRequired\n};\n\nexport default Painting;\n","import React, { Component } from \"react\";\nimport Painting from \"./Painting\";\nimport PropTypes from \"prop-types\";\n\nclass Paintings extends Component {\n  render() {\n    return this.props.paintings.map(painting => (\n      <Painting\n        key={painting.id}\n        painting={painting}\n        changeClickedState={this.props.changeClickedState}\n      />\n    ));\n  }\n}\n\nPaintings.propTypes = {\n  paintings: PropTypes.array.isRequired,\n  changeClickedState: PropTypes.func.isRequired\n};\n\nexport default Paintings;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    const { score, topScore } = this.props;\n    return (\n      <div>\n        <h1>Clicky Game</h1>\n        <h2>\n          Click on an image to earn points, but don't click any more than once!\n        </h2>\n        <p>Score: {score}</p>\n        <p>Top Score: {topScore}</p>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Paintings from \"./Paintings\";\nimport Header from \"../Header/Header\";\nimport \"./Images.css\";\n\nclass Images extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    paintings: [\n      {\n        id: 1,\n        name: \"rothko chapel\",\n        src: \"https://i.ibb.co/PZrpHPg/chapel.jpg\",\n        clicked: false\n      },\n      {\n        id: 2,\n        name: \"with my back to the world\",\n        src: \"https://i.ibb.co/w0KFQRF/martinback.jpg\",\n        clicked: false\n      },\n      {\n        id: 3,\n        name: \"gratitude\",\n        src: \"https://i.ibb.co/dj7Kmt7/martingratitude.jpg\",\n        clicked: false\n      },\n      {\n        id: 4,\n        name: \"buds\",\n        src: \"https://i.ibb.co/xJS5177/martinbuds.jpg\",\n        clicked: false\n      },\n      {\n        id: 5,\n        name: \"faraway love\",\n        src: \"https://i.ibb.co/QHP1xMd/martinlove.jpg\",\n        clicked: false\n      },\n      {\n        id: 6,\n        name: \"morning\",\n        src: \"https://i.ibb.co/PzKTjwL/martinmorning.jpg\",\n        clicked: false\n      },\n      {\n        id: 7,\n        name: \"rothko grey\",\n        src: \"https://i.ibb.co/4PYM0xR/rothkogrey.jpg\",\n        clicked: false\n      },\n      {\n        id: 8,\n        name: \"four darks in red\",\n        src: \"https://i.ibb.co/V3DCgB8/rothkored.jpg\",\n        clicked: false\n      },\n      {\n        id: 9,\n        name: \"rust and blue\",\n        src: \"https://i.ibb.co/1J7Rb1H/rothkorust.jpg\",\n        clicked: false\n      }\n    ]\n  };\n\n  changeClickedState = id => {\n    this.state.paintings.map(painting => {\n      if (painting.id === id && painting.clicked === false) {\n        painting.clicked = true;\n        this.setState({ score: this.state.score + 1 });\n\n        if (this.state.score >= this.state.topScore) {\n          this.setState({\n            topScore: this.state.score + 1\n          });\n        }\n      } else if (painting.id === id && painting.clicked === true) {\n        this.setState({ score: 0 });\n        this.state.paintings.map(painting => {\n          painting.clicked = false;\n          return painting;\n        });\n      }\n      return painting;\n    });\n    this.shuffleArr(this.state.paintings);\n  };\n\n  //Fisher-Yates shuffle algorithm\n  shuffleArr = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore={this.state.topScore} />\n        <Paintings\n          paintings={this.state.paintings}\n          changeClickedState={this.changeClickedState}\n        />\n      </div>\n    );\n  }\n}\nexport default Images;\n","import React from \"react\";\nimport \"./App.css\";\nimport Images from \"./components/Images/Images\";\n\nfunction App() {\n  return (\n    <div>\n      <Images />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}